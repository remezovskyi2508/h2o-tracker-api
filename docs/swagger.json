{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "WATER TRACKER APP",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Documentation about Contacts App"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://contacts-app-ejs8.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "WATER TRACKER",
      "description": "WATER TRACKER."
    },
    {
      "name": "Auth",
      "description": "Operations about Authentication & Authorization."
    }
  ],
  "paths": {
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User by id",
        "operationId": "getUserById",
        "description": "Retrieve a user data with the given id.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Id of the user to be searched",
            "schema": {
              "type": "string",
              "example": "676b1e6e5e2acedb2277e99b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user with id=676b1e6e5e2acedb2277e99b"
                    },
                    "data": {
                      "$ref": "#/components/schemas/users"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user data",
        "operationId": "updateUserById",
        "description": "Update a user's information by id.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user to update.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "676b1e6e5e2acedb2277e99b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The field to update in the user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "Ava Davis"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "example@mail.com"
                  },
                  "gender": {
                    "description": "User's gender identity. Options: male, female.",
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ],
                    "example": "female"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User's data updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User's data updated successfully."
                    },
                    "data": {
                      "$ref": "#/components/schemas/users"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/avatar": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user avatar",
        "operationId": "updateAvatar",
        "description": "Upload or update user profile avatar image",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the user to update.",
            "schema": {
              "type": "string",
              "example": "676b1e6e5e2acedb2277e99b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "description": "Image file for avatar",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "avatar"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Avatar updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "avatarUrl": {
                          "type": "string",
                          "example": "https://res.cloudinary.com/your-cloud/image/upload/v1234567890/avatars/user-avatar.jpg"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "users": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "Ava Davis"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "example@mail.com"
          },
          "password": {
            "description": "The user's password for authentication must be at least 8 characters long and no more than 64 characters.",
            "type": "string",
            "example": "S3cur3P@ss1"
          },
          "oldPassword": {
            "description": "Previous user password for authentication must be at least 8 characters long and no more than 64 characters.",
            "type": "string",
            "example": "A5mnr3T4&ss0"
          },
          "gender": {
            "description": "User's gender identity. Options may include male, female",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "male"
          },
          "avatar": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "URL of the user's avatar image."
              },
              "public_id": {
                "type": "string",
                "description": "Cloud storage identifier for the avatar."
              }
            }
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "oneOf": [
                        {
                          "example": "Invalid body"
                        },
                        {
                          "example": "Invalid ID format"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "InternalServerError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Something went wrong"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}