{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "WATER TRACKER APP",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Documentation about Contacts App"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://h2o-tracker-api.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "WATER TRACKER",
      "description": "WATER TRACKER."
    },
    {
      "name": "Auth",
      "description": "Operations about Authentication & Authorization."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registering a new user",
        "operationId": "registerUser",
        "description": "Registration of a new user in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth201"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - Invalid registration data entered.",
            "$ref": "#/components/responses/400"
          },
          "409": {
            "description": "Conflict - Email is already in use for another user.",
            "$ref": "#/components/responses/409"
          },
          "500": {
            "description": "Server error - There was an unforeseen error during registration.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in to the system",
        "operationId": "loginUser",
        "description": "Sign in existing user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 64,
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful entry",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "2ksAkpuxa/4Cw+md/EGqNadYKtx0WQAkzA+bsA19"
                        },
                        "userId": {
                          "type": "string",
                          "example": "67a0e9c6d68fd2d13913a587"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/reset-pwd": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Change password",
        "operationId": "resetUserPassword",
        "description": "Allows the user to change the old password to a new one if the old password is correct.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "oldPassword",
                  "newPassword"
                ],
                "properties": {
                  "oldPassword": {
                    "type": "string",
                    "description": "Old user password",
                    "example": "password123"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "New user password",
                    "example": "password098"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password successfully changed"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or old password is incorrect",
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Unauthorized or old password is incorrect",
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out of the system",
        "operationId": "logoutUser",
        "description": "Logout user from the system by clearing authentication tokens and session",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successful logout - Tokens and session have been cleared, the user has successfully logged out."
          },
          "404": {
            "description": "Session not found - The specified sessionId is missing or not found on the server.",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Server error - An unpredictable error occurred while processing the request.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User by id",
        "operationId": "getUserById",
        "description": "Retrieve a user data with the given id.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Id of the user to be searched",
            "schema": {
              "type": "string",
              "example": "676b1e6e5e2acedb2277e99b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user with id=676b1e6e5e2acedb2277e99b"
                    },
                    "data": {
                      "$ref": "#/components/schemas/users"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user data",
        "operationId": "updateUserById",
        "description": "Update a user's information by id.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user to update.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "676b1e6e5e2acedb2277e99b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The field to update in the user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "Ava Davis"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "example@mail.com"
                  },
                  "gender": {
                    "description": "User's gender identity. Options: male, female.",
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ],
                    "example": "female"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User's data updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User's data updated successfully."
                    },
                    "data": {
                      "$ref": "#/components/schemas/users"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/avatar": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user avatar",
        "operationId": "updateAvatar",
        "description": "Upload or update user profile avatar image",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the user to update.",
            "schema": {
              "type": "string",
              "example": "676b1e6e5e2acedb2277e99b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "description": "Image file for avatar",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "avatar"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Avatar updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "avatarUrl": {
                          "type": "string",
                          "example": "https://res.cloudinary.com/your-cloud/image/upload/v1234567890/avatars/user-avatar.jpg"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Add water",
        "operationId": "addWaterRecord",
        "description": "Add new water record",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date",
                  "waterVolume"
                ],
                "properties": {
                  "date": {
                    "description": "Date",
                    "type": "string",
                    "example": "2025-01-01T00:01"
                  },
                  "waterVolume": {
                    "description": "Water volume",
                    "type": "string",
                    "example": "100",
                    "minimum": 1,
                    "maximum": 5000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "date",
                    "waterVolume",
                    "userId",
                    "_id"
                  ],
                  "properties": {
                    "date": {
                      "type": "string",
                      "example": "2025-02-05T11:04:41.051Z"
                    },
                    "waterVolume": {
                      "type": "integer",
                      "example": 100
                    },
                    "userId": {
                      "type": "string",
                      "example": "67a32cdba56bdcc1ac56408b"
                    },
                    "_id": {
                      "type": "string",
                      "example": "67a3496aeace5a0f67a013c0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/water/{id}": {
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete water record",
        "operationId": "deleteWaterRecord",
        "description": "Delete water record",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67a32cf5a56bdcc1ac564095"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record deleted"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Update record by id",
        "operationId": "updateWaterRecord",
        "description": "Update record by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67a32cf5a56bdcc1ac564095"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "waterVolume"
                ],
                "properties": {
                  "waterVolume": {
                    "description": "Water volume",
                    "type": "string",
                    "example": "100",
                    "minimum": 1,
                    "maximum": 5000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/waterRecord"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/water/today": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get list of water records",
        "operationId": "getTodayWater",
        "description": "Get list of water records from today",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "percentage",
                    "totalAmount",
                    "records"
                  ],
                  "properties": {
                    "percentage": {
                      "type": "string",
                      "example": "26.67"
                    },
                    "totalAmount": {
                      "type": "integer",
                      "example": 1400
                    },
                    "records": {
                      "type": "array",
                      "description": "List of used water(mL)",
                      "items": {
                        "$ref": "#/components/schemas/waterRecord"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/water/month": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get statistic for month",
        "operationId": "getMonthlyStats",
        "description": "Get statistic for month",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "year",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2025
            }
          },
          {
            "in": "query",
            "name": "month",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "List of days statistics",
                  "items": {
                    "type": "object",
                    "required": [
                      "date",
                      "dailyGoal",
                      "percentage",
                      "entries"
                    ],
                    "properties": {
                      "date": {
                        "type": "string",
                        "example": "2, February"
                      },
                      "dailyGoal": {
                        "type": "string",
                        "example": "1.8 L"
                      },
                      "percentage": {
                        "type": "string",
                        "example": "16.67%"
                      },
                      "entries": {
                        "type": "integer",
                        "example": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "authRegister": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "auth201": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Successfully registered a user!"
          },
          "data": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "example": "67a0e9c6d68fd2d13913a587"
              },
              "email": {
                "type": "string",
                "format": "email",
                "example": "user@example.com"
              }
            }
          }
        }
      },
      "users": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "Ava Davis"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "example@mail.com"
          },
          "password": {
            "description": "The user's password for authentication must be at least 8 characters long and no more than 64 characters.",
            "type": "string",
            "example": "S3cur3P@ss1"
          },
          "oldPassword": {
            "description": "Previous user password for authentication must be at least 8 characters long and no more than 64 characters.",
            "type": "string",
            "example": "A5mnr3T4&ss0"
          },
          "gender": {
            "description": "User's gender identity. Options may include male, female",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "avatar": {
            "description": "User profile avatar image",
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "URL of the user's avatar image."
              },
              "public_id": {
                "type": "string",
                "description": "Cloud storage identifier for the avatar."
              }
            }
          },
          "dailyNorm": {
            "type": "number",
            "description": "Daily water consumption of the user, cannot exceed 15000",
            "example": 1800
          }
        }
      },
      "waterRecord": {
        "type": "object",
        "required": [
          "date",
          "waterVolume",
          "userId",
          "_id"
        ],
        "properties": {
          "date": {
            "type": "string",
            "example": "2025-02-05T11:04:41.051Z"
          },
          "waterVolume": {
            "type": "integer",
            "example": 100
          },
          "userId": {
            "type": "string",
            "example": "67a32cdba56bdcc1ac56408b"
          },
          "_id": {
            "type": "string",
            "example": "67a3496aeace5a0f67a013c0"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "oneOf": [
                        {
                          "example": "Invalid body"
                        },
                        {
                          "example": "Invalid ID format"
                        },
                        {
                          "example": "Invalid year or month"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "oneOf": [
                        {
                          "example": "User not found"
                        },
                        {
                          "example": "Entry not found"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Email is already in use"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "InternalServerError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Something went wrong"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}